{
  "_args": [
    [
      {
        "raw": "mini-store@^1.1.0",
        "scope": null,
        "escapedName": "mini-store",
        "name": "mini-store",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/home/zhoushixiong/react-family/node_modules/rc-menu"
    ]
  ],
  "_cnpm_publish_time": 1524118980200,
  "_from": "mini-store@^1.1.0",
  "_hasShrinkwrap": false,
  "_id": "mini-store@1.1.0",
  "_location": "/mini-store",
  "_nodeVersion": "9.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mini-store_1.1.0_1524118980084_0.7460574646601335"
  },
  "_npmUser": {
    "name": "yesmeck",
    "email": "yesmeck@gmail.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mini-store@^1.1.0",
    "scope": null,
    "escapedName": "mini-store",
    "name": "mini-store",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/rc-menu",
    "/rc-table"
  ],
  "_resolved": "http://registry.npm.taobao.org/mini-store/download/mini-store-1.1.0.tgz",
  "_shasum": "4d6b3fb5c89aa0303d9b39475efb3439cd42f04f",
  "_shrinkwrap": null,
  "_spec": "mini-store@^1.1.0",
  "_where": "/home/zhoushixiong/react-family/node_modules/rc-menu",
  "dependencies": {
    "hoist-non-react-statics": "^2.3.1",
    "prop-types": "^15.6.0",
    "shallowequal": "^1.0.2"
  },
  "description": "A state store for React component.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-preset-env": "^1.6.0",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "enzyme": "^3.1.0",
    "enzyme-adapter-react-16": "^1.0.2",
    "jest": "^21.2.1",
    "react": "^16.0.0",
    "react-dom": "^16.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "4d6b3fb5c89aa0303d9b39475efb3439cd42f04f",
    "size": 3920,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/mini-store/download/mini-store-1.1.0.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "21826aa4bd2493f04bedfc94a2ee6034a72070bd",
  "jest": {
    "setupFiles": [
      "./tests/setup.js"
    ]
  },
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "yesmeck",
      "email": "yesmeck@gmail.com"
    }
  ],
  "name": "mini-store",
  "optionalDependencies": {},
  "publish_time": 1524118980200,
  "readme": "# mini-store\n\nA state store for React component.\n\n## Motivation\n\nWhen you want to share a component's state to another one, a commom pattern in React world is [lifting state up](https://reactjs.org/docs/lifting-state-up.html#lifting-state-up). But one problem of this pattern is performance, assume we have a component in following hierarchy:\n\n```javascript\n<Parent>\n  <ChildA />\n  <ChildB />\n  <ChildC />\n</Parent>\n```\n\n`ChildA` want to share state with `ChildB`, so you lifting `ChildA`'s state up to `Parent`. Now, when `ChildA`'s state changes, the whole `Parent` will rerender, includes `ChildC` which should not happen.\n\nRedux do a good job at this situation throgh keeping all state in store, then component can subscribe state's changes, and only connected components will rerender. But 'redux' + 'react-reduxt' is overkill when you are writing a component library. So I wrote this little library, It's like Redux's store without \"reducer\" and \"dispatch\".\n\n## Example\n\n[See this demo online.](https://codesandbox.io/s/mq6223x08p)\n\n```javascript\nimport { Provider, create, connect } from 'mini-store';\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.store = create({\n      count: 0,\n    });\n  }\n\n  render() {\n    return (\n      <Provider store={this.store}>\n        <div>\n          <Buttons />\n          <Result />\n        </div>\n      </Provider>\n    )\n  }\n}\n\n@connect()\nclass Buttons extends React.Component {\n  handleClick = (step) => () => {\n    const { store } = this.props;\n    const { count } = store.getState();\n    store.setState({ count: count + step });\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick(1)}>+</button>\n        <button onClick={this.handleClick(1)}>-</button>\n      </div>\n    );\n  }\n}\n\n@connect((state) => ({ count: state.count }))\nclass Result extends React.Component {\n  render() {\n    return (\n      <div>{this.props.count}</div>\n    );\n  };\n}\n```\n\n## API\n\n### `create(initialState)`\n\nCreates a store that holds the state. `initialState` is plain object.\n\n### `<Provider store>`\n\nMakes the store available to the connect() calls in the component hierarchy below.\n\n### `connect(mapStateToProps)`\n\nConnects a React component to the store. It works like Redux's `connect`, but only accept `mapStateToProps`. The connected component also receive `store` as a prop, you can call `setState` directly on store.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "babel src -d lib",
    "prepack": "npm run build",
    "test": "jest"
  },
  "version": "1.1.0"
}
